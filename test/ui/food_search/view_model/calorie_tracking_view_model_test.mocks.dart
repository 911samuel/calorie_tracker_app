// Mocks generated by Mockito 5.4.6 from annotations
// in calorie_tracker_app/test/ui/food_search/view_model/calorie_tracking_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:calorie_tracker_app/data/repository/food_repository.dart'
    as _i7;
import 'package:calorie_tracker_app/data/services/shared_prefs_service.dart'
    as _i8;
import 'package:calorie_tracker_app/domain/models/daily_summary.dart' as _i2;
import 'package:calorie_tracker_app/domain/models/food.dart' as _i5;
import 'package:calorie_tracker_app/domain/models/tracked_food.dart' as _i6;
import 'package:calorie_tracker_app/domain/models/user.dart' as _i9;
import 'package:calorie_tracker_app/domain/use_cases/calorie_tracking_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDailySummary_0 extends _i1.SmartFake implements _i2.DailySummary {
  _FakeDailySummary_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CalorieTrackingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalorieTrackingUseCase extends _i1.Mock
    implements _i3.CalorieTrackingUseCase {
  MockCalorieTrackingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addFoodToMeal({
    required _i5.Food? food,
    required double? amount,
    required DateTime? date,
    required String? mealType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addFoodToMeal, [], {
              #food: food,
              #amount: amount,
              #date: date,
              #mealType: mealType,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeFoodFromMeal(int? trackedFoodId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFoodFromMeal, [trackedFoodId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.TrackedFood>> getMealFoods(
    DateTime? date,
    String? mealType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMealFoods, [date, mealType]),
            returnValue: _i4.Future<List<_i6.TrackedFood>>.value(
              <_i6.TrackedFood>[],
            ),
          )
          as _i4.Future<List<_i6.TrackedFood>>);

  @override
  _i4.Future<_i2.DailySummary> getDailySummary(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getDailySummary, [date]),
            returnValue: _i4.Future<_i2.DailySummary>.value(
              _FakeDailySummary_0(
                this,
                Invocation.method(#getDailySummary, [date]),
              ),
            ),
          )
          as _i4.Future<_i2.DailySummary>);

  @override
  _i4.Future<List<_i6.TrackedFood>> getAllTrackedFoods() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTrackedFoods, []),
            returnValue: _i4.Future<List<_i6.TrackedFood>>.value(
              <_i6.TrackedFood>[],
            ),
          )
          as _i4.Future<List<_i6.TrackedFood>>);
}

/// A class which mocks [IFoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFoodRepository extends _i1.Mock implements _i7.IFoodRepository {
  MockIFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Food>> searchFoods({
    required String? searchTerm,
    int? page = 1,
    int? pageSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchFoods, [], {
              #searchTerm: searchTerm,
              #page: page,
              #pageSize: pageSize,
            }),
            returnValue: _i4.Future<List<_i5.Food>>.value(<_i5.Food>[]),
          )
          as _i4.Future<List<_i5.Food>>);
}

/// A class which mocks [SharedPrefsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsService extends _i1.Mock
    implements _i8.SharedPrefsService {
  MockSharedPrefsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveUser(_i9.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i9.User?> loadUser() =>
      (super.noSuchMethod(
            Invocation.method(#loadUser, []),
            returnValue: _i4.Future<_i9.User?>.value(),
          )
          as _i4.Future<_i9.User?>);
}
