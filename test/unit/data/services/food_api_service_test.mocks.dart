// Mocks generated by Mockito 5.4.6 from annotations
// in calorie_tracker_app/test/unit/data/services/food_api_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:calorie_tracker_app/config/api_config.dart' as _i7;
import 'package:calorie_tracker_app/data/services/food_api_service.dart' as _i4;
import 'package:calorie_tracker_app/domain/models/food.dart' as _i3;
import 'package:calorie_tracker_app/domain/models/food_api_models.dart' as _i6;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFood_1 extends _i1.SmartFake implements _i3.Food {
  _FakeFood_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHttpClient extends _i1.Mock implements _i4.IHttpClient {
  MockIHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {#queryParameters: queryParameters},
            ),
            returnValue: _i5.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParameters: queryParameters},
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [IFoodMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFoodMapper extends _i1.Mock implements _i4.IFoodMapper {
  MockIFoodMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Food mapToFood(_i6.ProductDto? productDto) =>
      (super.noSuchMethod(
            Invocation.method(#mapToFood, [productDto]),
            returnValue: _FakeFood_1(
              this,
              Invocation.method(#mapToFood, [productDto]),
            ),
          )
          as _i3.Food);

  @override
  List<_i3.Food> mapToFoodList(List<_i6.ProductDto>? productDtos) =>
      (super.noSuchMethod(
            Invocation.method(#mapToFoodList, [productDtos]),
            returnValue: <_i3.Food>[],
          )
          as List<_i3.Food>);
}

/// A class which mocks [IApiConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockIApiConfig extends _i1.Mock implements _i7.IApiConfig {
  MockIApiConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  String get endpoint =>
      (super.noSuchMethod(
            Invocation.getter(#endpoint),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#endpoint),
            ),
          )
          as String);

  @override
  int get defaultPageSize =>
      (super.noSuchMethod(Invocation.getter(#defaultPageSize), returnValue: 0)
          as int);

  @override
  int get requestTimeout =>
      (super.noSuchMethod(Invocation.getter(#requestTimeout), returnValue: 0)
          as int);
}
