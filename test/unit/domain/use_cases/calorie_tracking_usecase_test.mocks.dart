// Mocks generated by Mockito 5.4.6 from annotations
// in calorie_tracker_app/test/unit/domain/use_cases/calorie_tracking_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:calorie_tracker_app/data/repository/tracked_food_repository.dart'
    as _i3;
import 'package:calorie_tracker_app/domain/models/daily_summary.dart' as _i2;
import 'package:calorie_tracker_app/domain/models/tracked_food.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDailySummary_0 extends _i1.SmartFake implements _i2.DailySummary {
  _FakeDailySummary_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ITrackedFoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITrackedFoodRepository extends _i1.Mock
    implements _i3.ITrackedFoodRepository {
  MockITrackedFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addTrackedFood(_i5.TrackedFood? food) =>
      (super.noSuchMethod(
            Invocation.method(#addTrackedFood, [food]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeTrackedFood(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeTrackedFood, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.TrackedFood>> getTrackedFoodsByDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getTrackedFoodsByDate, [date]),
            returnValue: _i4.Future<List<_i5.TrackedFood>>.value(
              <_i5.TrackedFood>[],
            ),
          )
          as _i4.Future<List<_i5.TrackedFood>>);

  @override
  _i4.Future<List<_i5.TrackedFood>> getTrackedFoodsByDateAndMeal(
    DateTime? date,
    String? mealType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTrackedFoodsByDateAndMeal, [date, mealType]),
            returnValue: _i4.Future<List<_i5.TrackedFood>>.value(
              <_i5.TrackedFood>[],
            ),
          )
          as _i4.Future<List<_i5.TrackedFood>>);

  @override
  _i4.Future<_i2.DailySummary> getDailySummary(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getDailySummary, [date]),
            returnValue: _i4.Future<_i2.DailySummary>.value(
              _FakeDailySummary_0(
                this,
                Invocation.method(#getDailySummary, [date]),
              ),
            ),
          )
          as _i4.Future<_i2.DailySummary>);

  @override
  _i4.Future<List<_i5.TrackedFood>> getAllTrackedFoods() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTrackedFoods, []),
            returnValue: _i4.Future<List<_i5.TrackedFood>>.value(
              <_i5.TrackedFood>[],
            ),
          )
          as _i4.Future<List<_i5.TrackedFood>>);
}
